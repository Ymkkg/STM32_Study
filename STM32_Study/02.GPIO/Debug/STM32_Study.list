
STM32_Study.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800063c  0800063c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800063c  0800063c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800063c  0800063c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800063c  0800063c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800063c  0800063c  0000163c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000640  08000640  00001640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000644  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000008d7  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002ed  00000000  00000000  0000290b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000108  00000000  00000000  00002bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ae  00000000  00000000  00002d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000012e5  00000000  00000000  00002dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000145a  00000000  00000000  00004093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004223  00000000  00000000  000054ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00009710  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002b4  00000000  00000000  00009754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003d  00000000  00000000  00009a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000624 	.word	0x08000624

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000624 	.word	0x08000624

080001c8 <Set_GPIO_Init_Config>:
#include "gpio_driver.h"

void Set_GPIO_Init_Config(GPIOx_Reg_t *pGPIOx, uint8_t pin_num, uint8_t mode, uint8_t type, uint8_t speed, uint8_t pupd)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	4608      	mov	r0, r1
 80001d2:	4611      	mov	r1, r2
 80001d4:	461a      	mov	r2, r3
 80001d6:	4603      	mov	r3, r0
 80001d8:	70fb      	strb	r3, [r7, #3]
 80001da:	460b      	mov	r3, r1
 80001dc:	70bb      	strb	r3, [r7, #2]
 80001de:	4613      	mov	r3, r2
 80001e0:	707b      	strb	r3, [r7, #1]
	Set_GPIO_Mode(pGPIOx, mode, pin_num);
 80001e2:	78fa      	ldrb	r2, [r7, #3]
 80001e4:	78bb      	ldrb	r3, [r7, #2]
 80001e6:	4619      	mov	r1, r3
 80001e8:	6878      	ldr	r0, [r7, #4]
 80001ea:	f000 f816 	bl	800021a <Set_GPIO_Mode>
	Set_GPIO_Output_Type(pGPIOx, type, pin_num);
 80001ee:	78fa      	ldrb	r2, [r7, #3]
 80001f0:	787b      	ldrb	r3, [r7, #1]
 80001f2:	4619      	mov	r1, r3
 80001f4:	6878      	ldr	r0, [r7, #4]
 80001f6:	f000 f828 	bl	800024a <Set_GPIO_Output_Type>
	Set_GPIO_Output_Speed(pGPIOx, speed, pin_num);
 80001fa:	78fa      	ldrb	r2, [r7, #3]
 80001fc:	7c3b      	ldrb	r3, [r7, #16]
 80001fe:	4619      	mov	r1, r3
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f000 f839 	bl	8000278 <Set_GPIO_Output_Speed>
	Set_GPIO_PUPD(pGPIOx, pupd, pin_num);
 8000206:	78fa      	ldrb	r2, [r7, #3]
 8000208:	7d3b      	ldrb	r3, [r7, #20]
 800020a:	4619      	mov	r1, r3
 800020c:	6878      	ldr	r0, [r7, #4]
 800020e:	f000 f84b 	bl	80002a8 <Set_GPIO_PUPD>
}
 8000212:	bf00      	nop
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}

0800021a <Set_GPIO_Mode>:

void Set_GPIO_Mode(GPIOx_Reg_t *pGPIOx, uint8_t mode, uint8_t pin_num)
{
 800021a:	b480      	push	{r7}
 800021c:	b083      	sub	sp, #12
 800021e:	af00      	add	r7, sp, #0
 8000220:	6078      	str	r0, [r7, #4]
 8000222:	460b      	mov	r3, r1
 8000224:	70fb      	strb	r3, [r7, #3]
 8000226:	4613      	mov	r3, r2
 8000228:	70bb      	strb	r3, [r7, #2]
	pGPIOx->MODER |= (mode << (pin_num * 2));
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	78f9      	ldrb	r1, [r7, #3]
 8000230:	78ba      	ldrb	r2, [r7, #2]
 8000232:	0052      	lsls	r2, r2, #1
 8000234:	fa01 f202 	lsl.w	r2, r1, r2
 8000238:	431a      	orrs	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	601a      	str	r2, [r3, #0]
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr

0800024a <Set_GPIO_Output_Type>:

void Set_GPIO_Output_Type(GPIOx_Reg_t *pGPIOx, uint8_t type, uint8_t pin_num)
{
 800024a:	b480      	push	{r7}
 800024c:	b083      	sub	sp, #12
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
 8000252:	460b      	mov	r3, r1
 8000254:	70fb      	strb	r3, [r7, #3]
 8000256:	4613      	mov	r3, r2
 8000258:	70bb      	strb	r3, [r7, #2]
	pGPIOx->OTYPER |= (type << pin_num);
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	78f9      	ldrb	r1, [r7, #3]
 8000260:	78ba      	ldrb	r2, [r7, #2]
 8000262:	fa01 f202 	lsl.w	r2, r1, r2
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	605a      	str	r2, [r3, #4]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <Set_GPIO_Output_Speed>:

void Set_GPIO_Output_Speed(GPIOx_Reg_t *pGPIOx, uint8_t speed, uint8_t pin_num)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	460b      	mov	r3, r1
 8000282:	70fb      	strb	r3, [r7, #3]
 8000284:	4613      	mov	r3, r2
 8000286:	70bb      	strb	r3, [r7, #2]
	pGPIOx->OSPEEDR |= (speed << (pin_num * 2));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	78f9      	ldrb	r1, [r7, #3]
 800028e:	78ba      	ldrb	r2, [r7, #2]
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	609a      	str	r2, [r3, #8]
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr

080002a8 <Set_GPIO_PUPD>:

void Set_GPIO_PUPD(GPIOx_Reg_t *pGPIOx, uint8_t pupd, uint8_t pin_num)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
 80002b4:	4613      	mov	r3, r2
 80002b6:	70bb      	strb	r3, [r7, #2]
	pGPIOx->PUPDR |= (pupd << (pin_num * 2));
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	78f9      	ldrb	r1, [r7, #3]
 80002be:	78ba      	ldrb	r2, [r7, #2]
 80002c0:	0052      	lsls	r2, r2, #1
 80002c2:	fa01 f202 	lsl.w	r2, r1, r2
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
}
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr

080002d8 <Enable_Sysclk_Input>:

/*
 * clk_source = HSI, HSE, PLL
 */
void Enable_Sysclk_Input(uint8_t clk_source)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]

  switch(clk_source)
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d018      	beq.n	800031a <Enable_Sysclk_Input+0x42>
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	dc1f      	bgt.n	800032c <Enable_Sysclk_Input+0x54>
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d002      	beq.n	80002f6 <Enable_Sysclk_Input+0x1e>
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d009      	beq.n	8000308 <Enable_Sysclk_Input+0x30>
    case PLL:
      pRCC->CR |= ON << PLLON;
      break;

    default:
      break;
 80002f4:	e01a      	b.n	800032c <Enable_Sysclk_Input+0x54>
      pRCC->CR |= ON << HSION;
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <Enable_Sysclk_Input+0x64>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <Enable_Sysclk_Input+0x64>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f042 0201 	orr.w	r2, r2, #1
 8000304:	601a      	str	r2, [r3, #0]
      break;
 8000306:	e012      	b.n	800032e <Enable_Sysclk_Input+0x56>
      pRCC->CR |= ON << HSEON;
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <Enable_Sysclk_Input+0x64>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	4b0b      	ldr	r3, [pc, #44]	@ (800033c <Enable_Sysclk_Input+0x64>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000316:	601a      	str	r2, [r3, #0]
      break;
 8000318:	e009      	b.n	800032e <Enable_Sysclk_Input+0x56>
      pRCC->CR |= ON << PLLON;
 800031a:	4b08      	ldr	r3, [pc, #32]	@ (800033c <Enable_Sysclk_Input+0x64>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <Enable_Sysclk_Input+0x64>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000328:	601a      	str	r2, [r3, #0]
      break;
 800032a:	e000      	b.n	800032e <Enable_Sysclk_Input+0x56>
      break;
 800032c:	bf00      	nop
  }
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	20000000 	.word	0x20000000

08000340 <Wait_Sysclk_Ready>:

/*
 * clk_source = HSI, HSE, PLL
 */
void Wait_Sysclk_Ready(uint8_t clk_source)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
  switch(clk_source)
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b02      	cmp	r3, #2
 800034e:	d018      	beq.n	8000382 <Wait_Sysclk_Ready+0x42>
 8000350:	2b02      	cmp	r3, #2
 8000352:	dc1f      	bgt.n	8000394 <Wait_Sysclk_Ready+0x54>
 8000354:	2b00      	cmp	r3, #0
 8000356:	d002      	beq.n	800035e <Wait_Sysclk_Ready+0x1e>
 8000358:	2b01      	cmp	r3, #1
 800035a:	d009      	beq.n	8000370 <Wait_Sysclk_Ready+0x30>
    case PLL:
      while((pRCC->CR & 1 << PLLRDY) == 0);
      break;

    default:
      break;
 800035c:	e01a      	b.n	8000394 <Wait_Sysclk_Ready+0x54>
      while((pRCC->CR & 1 << HISRDY) == 0);
 800035e:	bf00      	nop
 8000360:	4b10      	ldr	r3, [pc, #64]	@ (80003a4 <Wait_Sysclk_Ready+0x64>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f003 0302 	and.w	r3, r3, #2
 800036a:	2b00      	cmp	r3, #0
 800036c:	d0f8      	beq.n	8000360 <Wait_Sysclk_Ready+0x20>
      break;
 800036e:	e012      	b.n	8000396 <Wait_Sysclk_Ready+0x56>
      while((pRCC->CR & 1 << HSERDY) == 0);
 8000370:	bf00      	nop
 8000372:	4b0c      	ldr	r3, [pc, #48]	@ (80003a4 <Wait_Sysclk_Ready+0x64>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f8      	beq.n	8000372 <Wait_Sysclk_Ready+0x32>
      break;
 8000380:	e009      	b.n	8000396 <Wait_Sysclk_Ready+0x56>
      while((pRCC->CR & 1 << PLLRDY) == 0);
 8000382:	bf00      	nop
 8000384:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <Wait_Sysclk_Ready+0x64>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0f8      	beq.n	8000384 <Wait_Sysclk_Ready+0x44>
      break;
 8000392:	e000      	b.n	8000396 <Wait_Sysclk_Ready+0x56>
      break;
 8000394:	bf00      	nop
  }
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	20000000 	.word	0x20000000

080003a8 <Set_Sysclk_Input>:

/*
 * clk_source = HSI, HSE, PLL
 */
void Set_Sysclk_Input(uint8_t clk_source)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
  pRCC->CFGR |= clk_source << SW;
 80003b2:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <Set_Sysclk_Input+0x28>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	6899      	ldr	r1, [r3, #8]
 80003b8:	79fa      	ldrb	r2, [r7, #7]
 80003ba:	4b05      	ldr	r3, [pc, #20]	@ (80003d0 <Set_Sysclk_Input+0x28>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	430a      	orrs	r2, r1
 80003c0:	609a      	str	r2, [r3, #8]
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	20000000 	.word	0x20000000

080003d4 <Enable_AHB1_Peri_Clk>:

void Enable_AHB1_Peri_Clk(uint8_t peri, uint8_t en_dis)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	460a      	mov	r2, r1
 80003de:	71fb      	strb	r3, [r7, #7]
 80003e0:	4613      	mov	r3, r2
 80003e2:	71bb      	strb	r3, [r7, #6]
	if(en_dis == ENABLE)
 80003e4:	79bb      	ldrb	r3, [r7, #6]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d10c      	bne.n	8000404 <Enable_AHB1_Peri_Clk+0x30>
	{
		pRCC->AHB1ENR |= 1 << peri;
 80003ea:	4b10      	ldr	r3, [pc, #64]	@ (800042c <Enable_AHB1_Peri_Clk+0x58>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	2101      	movs	r1, #1
 80003f4:	fa01 f303 	lsl.w	r3, r1, r3
 80003f8:	4619      	mov	r1, r3
 80003fa:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <Enable_AHB1_Peri_Clk+0x58>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	430a      	orrs	r2, r1
 8000400:	631a      	str	r2, [r3, #48]	@ 0x30
	}
	else
	{
		pRCC->AHB1ENR &= ~(1 << peri);
	}
}
 8000402:	e00c      	b.n	800041e <Enable_AHB1_Peri_Clk+0x4a>
		pRCC->AHB1ENR &= ~(1 << peri);
 8000404:	4b09      	ldr	r3, [pc, #36]	@ (800042c <Enable_AHB1_Peri_Clk+0x58>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2101      	movs	r1, #1
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	43db      	mvns	r3, r3
 8000414:	4619      	mov	r1, r3
 8000416:	4b05      	ldr	r3, [pc, #20]	@ (800042c <Enable_AHB1_Peri_Clk+0x58>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	400a      	ands	r2, r1
 800041c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000000 	.word	0x20000000

08000430 <Set_Clk_Output2>:

void Set_Clk_Output2(uint8_t mco2_source, uint8_t prescaler)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	460a      	mov	r2, r1
 800043a:	71fb      	strb	r3, [r7, #7]
 800043c:	4613      	mov	r3, r2
 800043e:	71bb      	strb	r3, [r7, #6]
	pRCC->CFGR |= prescaler << MCO2_PRE;
 8000440:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <Set_Clk_Output2+0x40>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	6899      	ldr	r1, [r3, #8]
 8000446:	79bb      	ldrb	r3, [r7, #6]
 8000448:	06da      	lsls	r2, r3, #27
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <Set_Clk_Output2+0x40>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	430a      	orrs	r2, r1
 8000450:	609a      	str	r2, [r3, #8]
	pRCC->CFGR |= mco2_source << MCO2;
 8000452:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <Set_Clk_Output2+0x40>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	6899      	ldr	r1, [r3, #8]
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	079a      	lsls	r2, r3, #30
 800045c:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <Set_Clk_Output2+0x40>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	430a      	orrs	r2, r1
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	20000000 	.word	0x20000000

08000474 <Set_PLLClk>:

void Set_PLLClk(uint8_t pll_src, uint8_t m, uint8_t n, uint8_t p)
{
 8000474:	b490      	push	{r4, r7}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4604      	mov	r4, r0
 800047c:	4608      	mov	r0, r1
 800047e:	4611      	mov	r1, r2
 8000480:	461a      	mov	r2, r3
 8000482:	4623      	mov	r3, r4
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	4603      	mov	r3, r0
 8000488:	71bb      	strb	r3, [r7, #6]
 800048a:	460b      	mov	r3, r1
 800048c:	717b      	strb	r3, [r7, #5]
 800048e:	4613      	mov	r3, r2
 8000490:	713b      	strb	r3, [r7, #4]
	//clear reset value
	pRCC->PLLCFGR &= ~(0xffff);
 8000492:	4b18      	ldr	r3, [pc, #96]	@ (80004f4 <Set_PLLClk+0x80>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	4a16      	ldr	r2, [pc, #88]	@ (80004f4 <Set_PLLClk+0x80>)
 800049a:	6812      	ldr	r2, [r2, #0]
 800049c:	0c1b      	lsrs	r3, r3, #16
 800049e:	041b      	lsls	r3, r3, #16
 80004a0:	6053      	str	r3, [r2, #4]

	pRCC->PLLCFGR |= pll_src << PLLSRC;
 80004a2:	4b14      	ldr	r3, [pc, #80]	@ (80004f4 <Set_PLLClk+0x80>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6859      	ldr	r1, [r3, #4]
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	059a      	lsls	r2, r3, #22
 80004ac:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <Set_PLLClk+0x80>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	430a      	orrs	r2, r1
 80004b2:	605a      	str	r2, [r3, #4]
	//4  -> 2MHz
	pRCC->PLLCFGR |= m << PLLM;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <Set_PLLClk+0x80>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	6859      	ldr	r1, [r3, #4]
 80004ba:	79ba      	ldrb	r2, [r7, #6]
 80004bc:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <Set_PLLClk+0x80>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	430a      	orrs	r2, r1
 80004c2:	605a      	str	r2, [r3, #4]
	//50 -> 100MHz
	pRCC->PLLCFGR |= n << PLLN;
 80004c4:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <Set_PLLClk+0x80>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	6859      	ldr	r1, [r3, #4]
 80004ca:	797b      	ldrb	r3, [r7, #5]
 80004cc:	019a      	lsls	r2, r3, #6
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <Set_PLLClk+0x80>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	430a      	orrs	r2, r1
 80004d4:	605a      	str	r2, [r3, #4]
	//1  -> 25MHz
	pRCC->PLLCFGR |= p << PLLP;
 80004d6:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <Set_PLLClk+0x80>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	6859      	ldr	r1, [r3, #4]
 80004dc:	793b      	ldrb	r3, [r7, #4]
 80004de:	041a      	lsls	r2, r3, #16
 80004e0:	4b04      	ldr	r3, [pc, #16]	@ (80004f4 <Set_PLLClk+0x80>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	430a      	orrs	r2, r1
 80004e6:	605a      	str	r2, [r3, #4]
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc90      	pop	{r4, r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000000 	.word	0x20000000

080004f8 <Init>:
#include "Init.h"

void Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	Init_Sysclk();
 80004fc:	f000 f804 	bl	8000508 <Init_Sysclk>
	Init_GPIO();
 8000500:	f000 f82a 	bl	8000558 <Init_GPIO>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <Init_Sysclk>:

void Init_Sysclk(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	//Set PLL Clk
#if SYSCLK == PLL
	Set_PLLClk(PLLSRC_HSE, 4, 80, 3);
 800050c:	2303      	movs	r3, #3
 800050e:	2250      	movs	r2, #80	@ 0x50
 8000510:	2104      	movs	r1, #4
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff ffae 	bl	8000474 <Set_PLLClk>
	Enable_Sysclk_Input(HSE);
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff fedd 	bl	80002d8 <Enable_Sysclk_Input>
	Wait_Sysclk_Ready(HSE);
 800051e:	2001      	movs	r0, #1
 8000520:	f7ff ff0e 	bl	8000340 <Wait_Sysclk_Ready>
#endif

	//Set Sysclk
	Enable_Sysclk_Input(SYSCLK);
 8000524:	2002      	movs	r0, #2
 8000526:	f7ff fed7 	bl	80002d8 <Enable_Sysclk_Input>
	Wait_Sysclk_Ready(SYSCLK);
 800052a:	2002      	movs	r0, #2
 800052c:	f7ff ff08 	bl	8000340 <Wait_Sysclk_Ready>
	Set_Sysclk_Input(SYSCLK);
 8000530:	2002      	movs	r0, #2
 8000532:	f7ff ff39 	bl	80003a8 <Set_Sysclk_Input>

	//Set Peri Clk Enable
	Init_PeriClk_Enable();
 8000536:	f000 f806 	bl	8000546 <Init_PeriClk_Enable>

	//Set Clock Output
	Set_Clk_Output2(MCO2_SYSCLK, DIV_5);
 800053a:	2107      	movs	r1, #7
 800053c:	2000      	movs	r0, #0
 800053e:	f7ff ff77 	bl	8000430 <Set_Clk_Output2>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}

08000546 <Init_PeriClk_Enable>:

void Init_PeriClk_Enable(void)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	af00      	add	r7, sp, #0
	Enable_AHB1_Peri_Clk(GPIOCEN, ENABLE);
 800054a:	2101      	movs	r1, #1
 800054c:	2002      	movs	r0, #2
 800054e:	f7ff ff41 	bl	80003d4 <Enable_AHB1_Peri_Clk>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <Init_GPIO>:

void Init_GPIO(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af02      	add	r7, sp, #8
	Set_GPIO_Init_Config(GPIOC_ADDR, 9, MODE_ALTER, TYPE_PUSH_PULL, SPEED_LOW, PUPD_NO);
 800055e:	2300      	movs	r3, #0
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	2300      	movs	r3, #0
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2300      	movs	r3, #0
 8000568:	2202      	movs	r2, #2
 800056a:	2109      	movs	r1, #9
 800056c:	4802      	ldr	r0, [pc, #8]	@ (8000578 <Init_GPIO+0x20>)
 800056e:	f7ff fe2b 	bl	80001c8 <Set_GPIO_Init_Config>
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40020800 	.word	0x40020800

0800057c <main>:

#include <stdint.h>
#include "Init.h"

int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	Init();
 8000580:	f7ff ffba 	bl	80004f8 <Init>

	while(1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <main+0x8>

08000588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000588:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800058c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480c      	ldr	r0, [pc, #48]	@ (80005c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000592:	490d      	ldr	r1, [pc, #52]	@ (80005c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000594:	4a0d      	ldr	r2, [pc, #52]	@ (80005cc <LoopForever+0xe>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a0a      	ldr	r2, [pc, #40]	@ (80005d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a8:	4c0a      	ldr	r4, [pc, #40]	@ (80005d4 <LoopForever+0x16>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b6:	f000 f811 	bl	80005dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff ffdf 	bl	800057c <main>

080005be <LoopForever>:

LoopForever:
  b LoopForever
 80005be:	e7fe      	b.n	80005be <LoopForever>
  ldr   r0, =_estack
 80005c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005cc:	08000644 	.word	0x08000644
  ldr r2, =_sbss
 80005d0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005d4:	20000020 	.word	0x20000020

080005d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC_IRQHandler>
	...

080005dc <__libc_init_array>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	4d0d      	ldr	r5, [pc, #52]	@ (8000614 <__libc_init_array+0x38>)
 80005e0:	4c0d      	ldr	r4, [pc, #52]	@ (8000618 <__libc_init_array+0x3c>)
 80005e2:	1b64      	subs	r4, r4, r5
 80005e4:	10a4      	asrs	r4, r4, #2
 80005e6:	2600      	movs	r6, #0
 80005e8:	42a6      	cmp	r6, r4
 80005ea:	d109      	bne.n	8000600 <__libc_init_array+0x24>
 80005ec:	4d0b      	ldr	r5, [pc, #44]	@ (800061c <__libc_init_array+0x40>)
 80005ee:	4c0c      	ldr	r4, [pc, #48]	@ (8000620 <__libc_init_array+0x44>)
 80005f0:	f000 f818 	bl	8000624 <_init>
 80005f4:	1b64      	subs	r4, r4, r5
 80005f6:	10a4      	asrs	r4, r4, #2
 80005f8:	2600      	movs	r6, #0
 80005fa:	42a6      	cmp	r6, r4
 80005fc:	d105      	bne.n	800060a <__libc_init_array+0x2e>
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f855 3b04 	ldr.w	r3, [r5], #4
 8000604:	4798      	blx	r3
 8000606:	3601      	adds	r6, #1
 8000608:	e7ee      	b.n	80005e8 <__libc_init_array+0xc>
 800060a:	f855 3b04 	ldr.w	r3, [r5], #4
 800060e:	4798      	blx	r3
 8000610:	3601      	adds	r6, #1
 8000612:	e7f2      	b.n	80005fa <__libc_init_array+0x1e>
 8000614:	0800063c 	.word	0x0800063c
 8000618:	0800063c 	.word	0x0800063c
 800061c:	0800063c 	.word	0x0800063c
 8000620:	08000640 	.word	0x08000640

08000624 <_init>:
 8000624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000626:	bf00      	nop
 8000628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062a:	bc08      	pop	{r3}
 800062c:	469e      	mov	lr, r3
 800062e:	4770      	bx	lr

08000630 <_fini>:
 8000630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000632:	bf00      	nop
 8000634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000636:	bc08      	pop	{r3}
 8000638:	469e      	mov	lr, r3
 800063a:	4770      	bx	lr
