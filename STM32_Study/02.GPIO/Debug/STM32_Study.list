
STM32_Study.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800075c  0800075c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800075c  0800075c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800075c  0800075c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800075c  0800075c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800075c  0800075c  0000175c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000760  08000760  00001760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000764  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000931  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002ed  00000000  00000000  00002965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000110  00000000  00000000  00002c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b5  00000000  00000000  00002d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000012f7  00000000  00000000  00002e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014ba  00000000  00000000  00004114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000423e  00000000  00000000  000055ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000980c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002dc  00000000  00000000  00009850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003d  00000000  00000000  00009b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000744 	.word	0x08000744

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000744 	.word	0x08000744

080001c8 <Set_GPIO_Init_Config>:
#include "gpio_driver.h"

void Set_GPIO_Init_Config(GPIOx_Reg_t *pGPIOx, uint8_t pin_num, uint8_t mode, uint8_t type, uint8_t speed, uint8_t pupd)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	4608      	mov	r0, r1
 80001d2:	4611      	mov	r1, r2
 80001d4:	461a      	mov	r2, r3
 80001d6:	4603      	mov	r3, r0
 80001d8:	70fb      	strb	r3, [r7, #3]
 80001da:	460b      	mov	r3, r1
 80001dc:	70bb      	strb	r3, [r7, #2]
 80001de:	4613      	mov	r3, r2
 80001e0:	707b      	strb	r3, [r7, #1]
	Set_GPIO_Mode(pGPIOx, mode, pin_num);
 80001e2:	78fa      	ldrb	r2, [r7, #3]
 80001e4:	78bb      	ldrb	r3, [r7, #2]
 80001e6:	4619      	mov	r1, r3
 80001e8:	6878      	ldr	r0, [r7, #4]
 80001ea:	f000 f816 	bl	800021a <Set_GPIO_Mode>
	Set_GPIO_Output_Type(pGPIOx, type, pin_num);
 80001ee:	78fa      	ldrb	r2, [r7, #3]
 80001f0:	787b      	ldrb	r3, [r7, #1]
 80001f2:	4619      	mov	r1, r3
 80001f4:	6878      	ldr	r0, [r7, #4]
 80001f6:	f000 f828 	bl	800024a <Set_GPIO_Output_Type>
	Set_GPIO_Output_Speed(pGPIOx, speed, pin_num);
 80001fa:	78fa      	ldrb	r2, [r7, #3]
 80001fc:	7c3b      	ldrb	r3, [r7, #16]
 80001fe:	4619      	mov	r1, r3
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f000 f839 	bl	8000278 <Set_GPIO_Output_Speed>
	Set_GPIO_PUPD(pGPIOx, pupd, pin_num);
 8000206:	78fa      	ldrb	r2, [r7, #3]
 8000208:	7d3b      	ldrb	r3, [r7, #20]
 800020a:	4619      	mov	r1, r3
 800020c:	6878      	ldr	r0, [r7, #4]
 800020e:	f000 f84b 	bl	80002a8 <Set_GPIO_PUPD>
}
 8000212:	bf00      	nop
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}

0800021a <Set_GPIO_Mode>:

void Set_GPIO_Mode(GPIOx_Reg_t *pGPIOx, uint8_t mode, uint8_t pin_num)
{
 800021a:	b480      	push	{r7}
 800021c:	b083      	sub	sp, #12
 800021e:	af00      	add	r7, sp, #0
 8000220:	6078      	str	r0, [r7, #4]
 8000222:	460b      	mov	r3, r1
 8000224:	70fb      	strb	r3, [r7, #3]
 8000226:	4613      	mov	r3, r2
 8000228:	70bb      	strb	r3, [r7, #2]
	pGPIOx->MODER |= (mode << (pin_num * 2));
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	78f9      	ldrb	r1, [r7, #3]
 8000230:	78ba      	ldrb	r2, [r7, #2]
 8000232:	0052      	lsls	r2, r2, #1
 8000234:	fa01 f202 	lsl.w	r2, r1, r2
 8000238:	431a      	orrs	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	601a      	str	r2, [r3, #0]
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr

0800024a <Set_GPIO_Output_Type>:

void Set_GPIO_Output_Type(GPIOx_Reg_t *pGPIOx, uint8_t type, uint8_t pin_num)
{
 800024a:	b480      	push	{r7}
 800024c:	b083      	sub	sp, #12
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
 8000252:	460b      	mov	r3, r1
 8000254:	70fb      	strb	r3, [r7, #3]
 8000256:	4613      	mov	r3, r2
 8000258:	70bb      	strb	r3, [r7, #2]
	pGPIOx->OTYPER |= (type << pin_num);
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	78f9      	ldrb	r1, [r7, #3]
 8000260:	78ba      	ldrb	r2, [r7, #2]
 8000262:	fa01 f202 	lsl.w	r2, r1, r2
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	605a      	str	r2, [r3, #4]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <Set_GPIO_Output_Speed>:

void Set_GPIO_Output_Speed(GPIOx_Reg_t *pGPIOx, uint8_t speed, uint8_t pin_num)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	460b      	mov	r3, r1
 8000282:	70fb      	strb	r3, [r7, #3]
 8000284:	4613      	mov	r3, r2
 8000286:	70bb      	strb	r3, [r7, #2]
	pGPIOx->OSPEEDR |= (speed << (pin_num * 2));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	78f9      	ldrb	r1, [r7, #3]
 800028e:	78ba      	ldrb	r2, [r7, #2]
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	609a      	str	r2, [r3, #8]
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr

080002a8 <Set_GPIO_PUPD>:

void Set_GPIO_PUPD(GPIOx_Reg_t *pGPIOx, uint8_t pupd, uint8_t pin_num)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
 80002b4:	4613      	mov	r3, r2
 80002b6:	70bb      	strb	r3, [r7, #2]
	pGPIOx->PUPDR |= (pupd << (pin_num * 2));
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	78f9      	ldrb	r1, [r7, #3]
 80002be:	78ba      	ldrb	r2, [r7, #2]
 80002c0:	0052      	lsls	r2, r2, #1
 80002c2:	fa01 f202 	lsl.w	r2, r1, r2
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
}
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr

080002d8 <Set_GPIO_Output>:

void Set_GPIO_Output(GPIOx_Reg_t *pGPIOx, uint8_t output, uint8_t pin_num)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	460b      	mov	r3, r1
 80002e2:	70fb      	strb	r3, [r7, #3]
 80002e4:	4613      	mov	r3, r2
 80002e6:	70bb      	strb	r3, [r7, #2]
	if(output == OUTPUT_SET)
 80002e8:	78fb      	ldrb	r3, [r7, #3]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d109      	bne.n	8000302 <Set_GPIO_Output+0x2a>
	{
		pGPIOx->BSRR |= 1 << pin_num;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	78ba      	ldrb	r2, [r7, #2]
 80002f4:	2101      	movs	r1, #1
 80002f6:	fa01 f202 	lsl.w	r2, r1, r2
 80002fa:	431a      	orrs	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	619a      	str	r2, [r3, #24]
	{
		//OUTPUT_RESET
		pGPIOx->BSRR |= 1 << (pin_num + 16);
	}

}
 8000300:	e009      	b.n	8000316 <Set_GPIO_Output+0x3e>
		pGPIOx->BSRR |= 1 << (pin_num + 16);
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	78ba      	ldrb	r2, [r7, #2]
 8000308:	3210      	adds	r2, #16
 800030a:	2101      	movs	r1, #1
 800030c:	fa01 f202 	lsl.w	r2, r1, r2
 8000310:	431a      	orrs	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	619a      	str	r2, [r3, #24]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
	...

08000324 <Enable_Sysclk_Input>:

/*
 * clk_source = HSI, HSE, PLL
 */
void Enable_Sysclk_Input(uint8_t clk_source)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]

  switch(clk_source)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b02      	cmp	r3, #2
 8000332:	d018      	beq.n	8000366 <Enable_Sysclk_Input+0x42>
 8000334:	2b02      	cmp	r3, #2
 8000336:	dc1f      	bgt.n	8000378 <Enable_Sysclk_Input+0x54>
 8000338:	2b00      	cmp	r3, #0
 800033a:	d002      	beq.n	8000342 <Enable_Sysclk_Input+0x1e>
 800033c:	2b01      	cmp	r3, #1
 800033e:	d009      	beq.n	8000354 <Enable_Sysclk_Input+0x30>
    case PLL:
      pRCC->CR |= ON << PLLON;
      break;

    default:
      break;
 8000340:	e01a      	b.n	8000378 <Enable_Sysclk_Input+0x54>
      pRCC->CR |= ON << HSION;
 8000342:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <Enable_Sysclk_Input+0x64>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <Enable_Sysclk_Input+0x64>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f042 0201 	orr.w	r2, r2, #1
 8000350:	601a      	str	r2, [r3, #0]
      break;
 8000352:	e012      	b.n	800037a <Enable_Sysclk_Input+0x56>
      pRCC->CR |= ON << HSEON;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <Enable_Sysclk_Input+0x64>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <Enable_Sysclk_Input+0x64>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000362:	601a      	str	r2, [r3, #0]
      break;
 8000364:	e009      	b.n	800037a <Enable_Sysclk_Input+0x56>
      pRCC->CR |= ON << PLLON;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <Enable_Sysclk_Input+0x64>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <Enable_Sysclk_Input+0x64>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000374:	601a      	str	r2, [r3, #0]
      break;
 8000376:	e000      	b.n	800037a <Enable_Sysclk_Input+0x56>
      break;
 8000378:	bf00      	nop
  }
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	20000000 	.word	0x20000000

0800038c <Wait_Sysclk_Ready>:

/*
 * clk_source = HSI, HSE, PLL
 */
void Wait_Sysclk_Ready(uint8_t clk_source)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
  switch(clk_source)
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2b02      	cmp	r3, #2
 800039a:	d018      	beq.n	80003ce <Wait_Sysclk_Ready+0x42>
 800039c:	2b02      	cmp	r3, #2
 800039e:	dc1f      	bgt.n	80003e0 <Wait_Sysclk_Ready+0x54>
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d002      	beq.n	80003aa <Wait_Sysclk_Ready+0x1e>
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d009      	beq.n	80003bc <Wait_Sysclk_Ready+0x30>
    case PLL:
      while((pRCC->CR & 1 << PLLRDY) == 0);
      break;

    default:
      break;
 80003a8:	e01a      	b.n	80003e0 <Wait_Sysclk_Ready+0x54>
      while((pRCC->CR & 1 << HISRDY) == 0);
 80003aa:	bf00      	nop
 80003ac:	4b10      	ldr	r3, [pc, #64]	@ (80003f0 <Wait_Sysclk_Ready+0x64>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f003 0302 	and.w	r3, r3, #2
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d0f8      	beq.n	80003ac <Wait_Sysclk_Ready+0x20>
      break;
 80003ba:	e012      	b.n	80003e2 <Wait_Sysclk_Ready+0x56>
      while((pRCC->CR & 1 << HSERDY) == 0);
 80003bc:	bf00      	nop
 80003be:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <Wait_Sysclk_Ready+0x64>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d0f8      	beq.n	80003be <Wait_Sysclk_Ready+0x32>
      break;
 80003cc:	e009      	b.n	80003e2 <Wait_Sysclk_Ready+0x56>
      while((pRCC->CR & 1 << PLLRDY) == 0);
 80003ce:	bf00      	nop
 80003d0:	4b07      	ldr	r3, [pc, #28]	@ (80003f0 <Wait_Sysclk_Ready+0x64>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f8      	beq.n	80003d0 <Wait_Sysclk_Ready+0x44>
      break;
 80003de:	e000      	b.n	80003e2 <Wait_Sysclk_Ready+0x56>
      break;
 80003e0:	bf00      	nop
  }
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000000 	.word	0x20000000

080003f4 <Set_Sysclk_Input>:

/*
 * clk_source = HSI, HSE, PLL
 */
void Set_Sysclk_Input(uint8_t clk_source)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
  pRCC->CFGR |= clk_source << SW;
 80003fe:	4b07      	ldr	r3, [pc, #28]	@ (800041c <Set_Sysclk_Input+0x28>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	6899      	ldr	r1, [r3, #8]
 8000404:	79fa      	ldrb	r2, [r7, #7]
 8000406:	4b05      	ldr	r3, [pc, #20]	@ (800041c <Set_Sysclk_Input+0x28>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	430a      	orrs	r2, r1
 800040c:	609a      	str	r2, [r3, #8]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	20000000 	.word	0x20000000

08000420 <Enable_AHB1_Peri_Clk>:

void Enable_AHB1_Peri_Clk(uint8_t peri, uint8_t en_dis)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	460a      	mov	r2, r1
 800042a:	71fb      	strb	r3, [r7, #7]
 800042c:	4613      	mov	r3, r2
 800042e:	71bb      	strb	r3, [r7, #6]
	if(en_dis == ENABLE)
 8000430:	79bb      	ldrb	r3, [r7, #6]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d10c      	bne.n	8000450 <Enable_AHB1_Peri_Clk+0x30>
	{
		pRCC->AHB1ENR |= 1 << peri;
 8000436:	4b10      	ldr	r3, [pc, #64]	@ (8000478 <Enable_AHB1_Peri_Clk+0x58>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	2101      	movs	r1, #1
 8000440:	fa01 f303 	lsl.w	r3, r1, r3
 8000444:	4619      	mov	r1, r3
 8000446:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <Enable_AHB1_Peri_Clk+0x58>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	430a      	orrs	r2, r1
 800044c:	631a      	str	r2, [r3, #48]	@ 0x30
	}
	else
	{
		pRCC->AHB1ENR &= ~(1 << peri);
	}
}
 800044e:	e00c      	b.n	800046a <Enable_AHB1_Peri_Clk+0x4a>
		pRCC->AHB1ENR &= ~(1 << peri);
 8000450:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <Enable_AHB1_Peri_Clk+0x58>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	2101      	movs	r1, #1
 800045a:	fa01 f303 	lsl.w	r3, r1, r3
 800045e:	43db      	mvns	r3, r3
 8000460:	4619      	mov	r1, r3
 8000462:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <Enable_AHB1_Peri_Clk+0x58>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	400a      	ands	r2, r1
 8000468:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	20000000 	.word	0x20000000

0800047c <Set_Clk_Output2>:

void Set_Clk_Output2(uint8_t mco2_source, uint8_t prescaler)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	460a      	mov	r2, r1
 8000486:	71fb      	strb	r3, [r7, #7]
 8000488:	4613      	mov	r3, r2
 800048a:	71bb      	strb	r3, [r7, #6]
	pRCC->CFGR |= prescaler << MCO2_PRE;
 800048c:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <Set_Clk_Output2+0x40>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	6899      	ldr	r1, [r3, #8]
 8000492:	79bb      	ldrb	r3, [r7, #6]
 8000494:	06da      	lsls	r2, r3, #27
 8000496:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <Set_Clk_Output2+0x40>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	430a      	orrs	r2, r1
 800049c:	609a      	str	r2, [r3, #8]
	pRCC->CFGR |= mco2_source << MCO2;
 800049e:	4b07      	ldr	r3, [pc, #28]	@ (80004bc <Set_Clk_Output2+0x40>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6899      	ldr	r1, [r3, #8]
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	079a      	lsls	r2, r3, #30
 80004a8:	4b04      	ldr	r3, [pc, #16]	@ (80004bc <Set_Clk_Output2+0x40>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	430a      	orrs	r2, r1
 80004ae:	609a      	str	r2, [r3, #8]
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr
 80004bc:	20000000 	.word	0x20000000

080004c0 <Set_PLLClk>:

void Set_PLLClk(uint8_t pll_src, uint8_t m, uint8_t n, uint8_t p)
{
 80004c0:	b490      	push	{r4, r7}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4604      	mov	r4, r0
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4623      	mov	r3, r4
 80004d0:	71fb      	strb	r3, [r7, #7]
 80004d2:	4603      	mov	r3, r0
 80004d4:	71bb      	strb	r3, [r7, #6]
 80004d6:	460b      	mov	r3, r1
 80004d8:	717b      	strb	r3, [r7, #5]
 80004da:	4613      	mov	r3, r2
 80004dc:	713b      	strb	r3, [r7, #4]
	//clear reset value
	pRCC->PLLCFGR &= ~(0xffff);
 80004de:	4b18      	ldr	r3, [pc, #96]	@ (8000540 <Set_PLLClk+0x80>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	4a16      	ldr	r2, [pc, #88]	@ (8000540 <Set_PLLClk+0x80>)
 80004e6:	6812      	ldr	r2, [r2, #0]
 80004e8:	0c1b      	lsrs	r3, r3, #16
 80004ea:	041b      	lsls	r3, r3, #16
 80004ec:	6053      	str	r3, [r2, #4]

	pRCC->PLLCFGR |= pll_src << PLLSRC;
 80004ee:	4b14      	ldr	r3, [pc, #80]	@ (8000540 <Set_PLLClk+0x80>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6859      	ldr	r1, [r3, #4]
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	059a      	lsls	r2, r3, #22
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <Set_PLLClk+0x80>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	605a      	str	r2, [r3, #4]
	//4  -> 2MHz
	pRCC->PLLCFGR |= m << PLLM;
 8000500:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <Set_PLLClk+0x80>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	6859      	ldr	r1, [r3, #4]
 8000506:	79ba      	ldrb	r2, [r7, #6]
 8000508:	4b0d      	ldr	r3, [pc, #52]	@ (8000540 <Set_PLLClk+0x80>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	430a      	orrs	r2, r1
 800050e:	605a      	str	r2, [r3, #4]
	//50 -> 100MHz
	pRCC->PLLCFGR |= n << PLLN;
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <Set_PLLClk+0x80>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6859      	ldr	r1, [r3, #4]
 8000516:	797b      	ldrb	r3, [r7, #5]
 8000518:	019a      	lsls	r2, r3, #6
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <Set_PLLClk+0x80>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	430a      	orrs	r2, r1
 8000520:	605a      	str	r2, [r3, #4]
	//1  -> 25MHz
	pRCC->PLLCFGR |= p << PLLP;
 8000522:	4b07      	ldr	r3, [pc, #28]	@ (8000540 <Set_PLLClk+0x80>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6859      	ldr	r1, [r3, #4]
 8000528:	793b      	ldrb	r3, [r7, #4]
 800052a:	041a      	lsls	r2, r3, #16
 800052c:	4b04      	ldr	r3, [pc, #16]	@ (8000540 <Set_PLLClk+0x80>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	430a      	orrs	r2, r1
 8000532:	605a      	str	r2, [r3, #4]
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bc90      	pop	{r4, r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000000 	.word	0x20000000

08000544 <Init>:
#include "Init.h"

void Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	Init_Sysclk();
 8000548:	f000 f804 	bl	8000554 <Init_Sysclk>
	Init_GPIO();
 800054c:	f000 f82e 	bl	80005ac <Init_GPIO>
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <Init_Sysclk>:

void Init_Sysclk(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	//Set PLL Clk
#if SYSCLK == PLL
	Set_PLLClk(PLLSRC_HSE, 4, 80, 3);
 8000558:	2303      	movs	r3, #3
 800055a:	2250      	movs	r2, #80	@ 0x50
 800055c:	2104      	movs	r1, #4
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff ffae 	bl	80004c0 <Set_PLLClk>
	Enable_Sysclk_Input(HSE);
 8000564:	2001      	movs	r0, #1
 8000566:	f7ff fedd 	bl	8000324 <Enable_Sysclk_Input>
	Wait_Sysclk_Ready(HSE);
 800056a:	2001      	movs	r0, #1
 800056c:	f7ff ff0e 	bl	800038c <Wait_Sysclk_Ready>
#endif

	//Set Sysclk
	Enable_Sysclk_Input(SYSCLK);
 8000570:	2002      	movs	r0, #2
 8000572:	f7ff fed7 	bl	8000324 <Enable_Sysclk_Input>
	Wait_Sysclk_Ready(SYSCLK);
 8000576:	2002      	movs	r0, #2
 8000578:	f7ff ff08 	bl	800038c <Wait_Sysclk_Ready>
	Set_Sysclk_Input(SYSCLK);
 800057c:	2002      	movs	r0, #2
 800057e:	f7ff ff39 	bl	80003f4 <Set_Sysclk_Input>

	//Set Peri Clk Enable
	Init_PeriClk_Enable();
 8000582:	f000 f806 	bl	8000592 <Init_PeriClk_Enable>

	//Set Clock Output
	Set_Clk_Output2(MCO2_SYSCLK, DIV_5);
 8000586:	2107      	movs	r1, #7
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff ff77 	bl	800047c <Set_Clk_Output2>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}

08000592 <Init_PeriClk_Enable>:

void Init_PeriClk_Enable(void)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	af00      	add	r7, sp, #0
	Enable_AHB1_Peri_Clk(GPIOCEN, ENABLE);
 8000596:	2101      	movs	r1, #1
 8000598:	2002      	movs	r0, #2
 800059a:	f7ff ff41 	bl	8000420 <Enable_AHB1_Peri_Clk>
	Enable_AHB1_Peri_Clk(GPIODEN, ENABLE);
 800059e:	2101      	movs	r1, #1
 80005a0:	2003      	movs	r0, #3
 80005a2:	f7ff ff3d 	bl	8000420 <Enable_AHB1_Peri_Clk>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <Init_GPIO>:

void Init_GPIO(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af02      	add	r7, sp, #8
	Set_GPIO_Init_Config((GPIOx_Reg_t*)GPIOC_ADDR, 9, MODE_ALTER, TYPE_PUSH_PULL, SPEED_LOW, PUPD_NO);
 80005b2:	2300      	movs	r3, #0
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2300      	movs	r3, #0
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2202      	movs	r2, #2
 80005be:	2109      	movs	r1, #9
 80005c0:	4834      	ldr	r0, [pc, #208]	@ (8000694 <Init_GPIO+0xe8>)
 80005c2:	f7ff fe01 	bl	80001c8 <Set_GPIO_Init_Config>
	Set_GPIO_Init_Config((GPIOx_Reg_t*)GPIOD_ADDR, 12, MODE_OUTPUT, TYPE_PUSH_PULL, SPEED_LOW, PUPD_NO);
 80005c6:	2300      	movs	r3, #0
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2300      	movs	r3, #0
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	2201      	movs	r2, #1
 80005d2:	210c      	movs	r1, #12
 80005d4:	4830      	ldr	r0, [pc, #192]	@ (8000698 <Init_GPIO+0xec>)
 80005d6:	f7ff fdf7 	bl	80001c8 <Set_GPIO_Init_Config>
	Set_GPIO_Init_Config((GPIOx_Reg_t*)GPIOD_ADDR, 13, MODE_OUTPUT, TYPE_PUSH_PULL, SPEED_LOW, PUPD_NO);
 80005da:	2300      	movs	r3, #0
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2300      	movs	r3, #0
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	2201      	movs	r2, #1
 80005e6:	210d      	movs	r1, #13
 80005e8:	482b      	ldr	r0, [pc, #172]	@ (8000698 <Init_GPIO+0xec>)
 80005ea:	f7ff fded 	bl	80001c8 <Set_GPIO_Init_Config>
	Set_GPIO_Init_Config((GPIOx_Reg_t*)GPIOD_ADDR, 14, MODE_OUTPUT, TYPE_PUSH_PULL, SPEED_LOW, PUPD_NO);
 80005ee:	2300      	movs	r3, #0
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2300      	movs	r3, #0
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	2201      	movs	r2, #1
 80005fa:	210e      	movs	r1, #14
 80005fc:	4826      	ldr	r0, [pc, #152]	@ (8000698 <Init_GPIO+0xec>)
 80005fe:	f7ff fde3 	bl	80001c8 <Set_GPIO_Init_Config>
	Set_GPIO_Init_Config((GPIOx_Reg_t*)GPIOD_ADDR, 15, MODE_OUTPUT, TYPE_PUSH_PULL, SPEED_LOW, PUPD_NO);
 8000602:	2300      	movs	r3, #0
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2300      	movs	r3, #0
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	2201      	movs	r2, #1
 800060e:	210f      	movs	r1, #15
 8000610:	4821      	ldr	r0, [pc, #132]	@ (8000698 <Init_GPIO+0xec>)
 8000612:	f7ff fdd9 	bl	80001c8 <Set_GPIO_Init_Config>

	Set_GPIO_Output((GPIOx_Reg_t*)GPIOD_ADDR, OUTPUT_SET, 12);
 8000616:	220c      	movs	r2, #12
 8000618:	2101      	movs	r1, #1
 800061a:	481f      	ldr	r0, [pc, #124]	@ (8000698 <Init_GPIO+0xec>)
 800061c:	f7ff fe5c 	bl	80002d8 <Set_GPIO_Output>
	Set_GPIO_Output((GPIOx_Reg_t*)GPIOD_ADDR, OUTPUT_SET, 13);
 8000620:	220d      	movs	r2, #13
 8000622:	2101      	movs	r1, #1
 8000624:	481c      	ldr	r0, [pc, #112]	@ (8000698 <Init_GPIO+0xec>)
 8000626:	f7ff fe57 	bl	80002d8 <Set_GPIO_Output>
	Set_GPIO_Output((GPIOx_Reg_t*)GPIOD_ADDR, OUTPUT_SET, 14);
 800062a:	220e      	movs	r2, #14
 800062c:	2101      	movs	r1, #1
 800062e:	481a      	ldr	r0, [pc, #104]	@ (8000698 <Init_GPIO+0xec>)
 8000630:	f7ff fe52 	bl	80002d8 <Set_GPIO_Output>
	Set_GPIO_Output((GPIOx_Reg_t*)GPIOD_ADDR, OUTPUT_SET, 15);
 8000634:	220f      	movs	r2, #15
 8000636:	2101      	movs	r1, #1
 8000638:	4817      	ldr	r0, [pc, #92]	@ (8000698 <Init_GPIO+0xec>)
 800063a:	f7ff fe4d 	bl	80002d8 <Set_GPIO_Output>

	Set_GPIO_Output((GPIOx_Reg_t*)GPIOD_ADDR, OUTPUT_RESET, 12);
 800063e:	220c      	movs	r2, #12
 8000640:	2100      	movs	r1, #0
 8000642:	4815      	ldr	r0, [pc, #84]	@ (8000698 <Init_GPIO+0xec>)
 8000644:	f7ff fe48 	bl	80002d8 <Set_GPIO_Output>
	Set_GPIO_Output((GPIOx_Reg_t*)GPIOD_ADDR, OUTPUT_RESET, 13);
 8000648:	220d      	movs	r2, #13
 800064a:	2100      	movs	r1, #0
 800064c:	4812      	ldr	r0, [pc, #72]	@ (8000698 <Init_GPIO+0xec>)
 800064e:	f7ff fe43 	bl	80002d8 <Set_GPIO_Output>
	Set_GPIO_Output((GPIOx_Reg_t*)GPIOD_ADDR, OUTPUT_RESET, 14);
 8000652:	220e      	movs	r2, #14
 8000654:	2100      	movs	r1, #0
 8000656:	4810      	ldr	r0, [pc, #64]	@ (8000698 <Init_GPIO+0xec>)
 8000658:	f7ff fe3e 	bl	80002d8 <Set_GPIO_Output>
	Set_GPIO_Output((GPIOx_Reg_t*)GPIOD_ADDR, OUTPUT_RESET, 15);
 800065c:	220f      	movs	r2, #15
 800065e:	2100      	movs	r1, #0
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <Init_GPIO+0xec>)
 8000662:	f7ff fe39 	bl	80002d8 <Set_GPIO_Output>

	Set_GPIO_Output((GPIOx_Reg_t*)GPIOD_ADDR, OUTPUT_SET, 12);
 8000666:	220c      	movs	r2, #12
 8000668:	2101      	movs	r1, #1
 800066a:	480b      	ldr	r0, [pc, #44]	@ (8000698 <Init_GPIO+0xec>)
 800066c:	f7ff fe34 	bl	80002d8 <Set_GPIO_Output>
	Set_GPIO_Output((GPIOx_Reg_t*)GPIOD_ADDR, OUTPUT_SET, 13);
 8000670:	220d      	movs	r2, #13
 8000672:	2101      	movs	r1, #1
 8000674:	4808      	ldr	r0, [pc, #32]	@ (8000698 <Init_GPIO+0xec>)
 8000676:	f7ff fe2f 	bl	80002d8 <Set_GPIO_Output>
	Set_GPIO_Output((GPIOx_Reg_t*)GPIOD_ADDR, OUTPUT_SET, 14);
 800067a:	220e      	movs	r2, #14
 800067c:	2101      	movs	r1, #1
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <Init_GPIO+0xec>)
 8000680:	f7ff fe2a 	bl	80002d8 <Set_GPIO_Output>
	Set_GPIO_Output((GPIOx_Reg_t*)GPIOD_ADDR, OUTPUT_SET, 15);
 8000684:	220f      	movs	r2, #15
 8000686:	2101      	movs	r1, #1
 8000688:	4803      	ldr	r0, [pc, #12]	@ (8000698 <Init_GPIO+0xec>)
 800068a:	f7ff fe25 	bl	80002d8 <Set_GPIO_Output>
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40020800 	.word	0x40020800
 8000698:	40020c00 	.word	0x40020c00

0800069c <main>:

#include <stdint.h>
#include "Init.h"

int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	Init();
 80006a0:	f7ff ff50 	bl	8000544 <Init>

	while(1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <main+0x8>

080006a8 <Reset_Handler>:
 80006a8:	480d      	ldr	r0, [pc, #52]	@ (80006e0 <LoopForever+0x2>)
 80006aa:	4685      	mov	sp, r0
 80006ac:	f3af 8000 	nop.w
 80006b0:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <LoopForever+0x6>)
 80006b2:	490d      	ldr	r1, [pc, #52]	@ (80006e8 <LoopForever+0xa>)
 80006b4:	4a0d      	ldr	r2, [pc, #52]	@ (80006ec <LoopForever+0xe>)
 80006b6:	2300      	movs	r3, #0
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:
 80006ba:	58d4      	ldr	r4, [r2, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:
 80006c0:	18c4      	adds	r4, r0, r3
 80006c2:	428c      	cmp	r4, r1
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>
 80006c6:	4a0a      	ldr	r2, [pc, #40]	@ (80006f0 <LoopForever+0x12>)
 80006c8:	4c0a      	ldr	r4, [pc, #40]	@ (80006f4 <LoopForever+0x16>)
 80006ca:	2300      	movs	r3, #0
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:
 80006d2:	42a2      	cmp	r2, r4
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>
 80006d6:	f000 f811 	bl	80006fc <__libc_init_array>
 80006da:	f7ff ffdf 	bl	800069c <main>

080006de <LoopForever>:
 80006de:	e7fe      	b.n	80006de <LoopForever>
 80006e0:	20020000 	.word	0x20020000
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000004 	.word	0x20000004
 80006ec:	08000764 	.word	0x08000764
 80006f0:	20000004 	.word	0x20000004
 80006f4:	20000020 	.word	0x20000020

080006f8 <ADC_IRQHandler>:
 80006f8:	e7fe      	b.n	80006f8 <ADC_IRQHandler>
	...

080006fc <__libc_init_array>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000734 <__libc_init_array+0x38>)
 8000700:	4c0d      	ldr	r4, [pc, #52]	@ (8000738 <__libc_init_array+0x3c>)
 8000702:	1b64      	subs	r4, r4, r5
 8000704:	10a4      	asrs	r4, r4, #2
 8000706:	2600      	movs	r6, #0
 8000708:	42a6      	cmp	r6, r4
 800070a:	d109      	bne.n	8000720 <__libc_init_array+0x24>
 800070c:	4d0b      	ldr	r5, [pc, #44]	@ (800073c <__libc_init_array+0x40>)
 800070e:	4c0c      	ldr	r4, [pc, #48]	@ (8000740 <__libc_init_array+0x44>)
 8000710:	f000 f818 	bl	8000744 <_init>
 8000714:	1b64      	subs	r4, r4, r5
 8000716:	10a4      	asrs	r4, r4, #2
 8000718:	2600      	movs	r6, #0
 800071a:	42a6      	cmp	r6, r4
 800071c:	d105      	bne.n	800072a <__libc_init_array+0x2e>
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f855 3b04 	ldr.w	r3, [r5], #4
 8000724:	4798      	blx	r3
 8000726:	3601      	adds	r6, #1
 8000728:	e7ee      	b.n	8000708 <__libc_init_array+0xc>
 800072a:	f855 3b04 	ldr.w	r3, [r5], #4
 800072e:	4798      	blx	r3
 8000730:	3601      	adds	r6, #1
 8000732:	e7f2      	b.n	800071a <__libc_init_array+0x1e>
 8000734:	0800075c 	.word	0x0800075c
 8000738:	0800075c 	.word	0x0800075c
 800073c:	0800075c 	.word	0x0800075c
 8000740:	08000760 	.word	0x08000760

08000744 <_init>:
 8000744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000746:	bf00      	nop
 8000748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074a:	bc08      	pop	{r3}
 800074c:	469e      	mov	lr, r3
 800074e:	4770      	bx	lr

08000750 <_fini>:
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	bf00      	nop
 8000754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000756:	bc08      	pop	{r3}
 8000758:	469e      	mov	lr, r3
 800075a:	4770      	bx	lr
