
STM32_Study.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000020c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000394  08000394  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000394  08000394  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000394  08000394  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000394  08000394  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000394  08000394  00001394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000398  08000398  00001398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800039c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003c5  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000173  00000000  00000000  000023f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00002570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004b  00000000  00000000  000025e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000108d  00000000  00000000  00002633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000009d5  00000000  00000000  000036c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003e3c  00000000  00000000  00004095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00007ed1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e0  00000000  00000000  00007f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003d  00000000  00000000  00007ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800037c 	.word	0x0800037c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800037c 	.word	0x0800037c

080001c8 <Enable_Sysclk_Input>:

/*
 * clk_source = HSI, HSE, PLL
 */
void Enable_Sysclk_Input(uint8_t clk_source)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]

  switch(clk_source)
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	2b02      	cmp	r3, #2
 80001d6:	d018      	beq.n	800020a <Enable_Sysclk_Input+0x42>
 80001d8:	2b02      	cmp	r3, #2
 80001da:	dc1f      	bgt.n	800021c <Enable_Sysclk_Input+0x54>
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d002      	beq.n	80001e6 <Enable_Sysclk_Input+0x1e>
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d009      	beq.n	80001f8 <Enable_Sysclk_Input+0x30>
    case PLL:
      pRCC->CR |= ON << PLLON;
      break;

    default:
      break;
 80001e4:	e01a      	b.n	800021c <Enable_Sysclk_Input+0x54>
      pRCC->CR |= ON << HSION;
 80001e6:	4b11      	ldr	r3, [pc, #68]	@ (800022c <Enable_Sysclk_Input+0x64>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	4b0f      	ldr	r3, [pc, #60]	@ (800022c <Enable_Sysclk_Input+0x64>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f042 0201 	orr.w	r2, r2, #1
 80001f4:	601a      	str	r2, [r3, #0]
      break;
 80001f6:	e012      	b.n	800021e <Enable_Sysclk_Input+0x56>
      pRCC->CR |= ON << HSEON;
 80001f8:	4b0c      	ldr	r3, [pc, #48]	@ (800022c <Enable_Sysclk_Input+0x64>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4b0b      	ldr	r3, [pc, #44]	@ (800022c <Enable_Sysclk_Input+0x64>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000206:	601a      	str	r2, [r3, #0]
      break;
 8000208:	e009      	b.n	800021e <Enable_Sysclk_Input+0x56>
      pRCC->CR |= ON << PLLON;
 800020a:	4b08      	ldr	r3, [pc, #32]	@ (800022c <Enable_Sysclk_Input+0x64>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b06      	ldr	r3, [pc, #24]	@ (800022c <Enable_Sysclk_Input+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000218:	601a      	str	r2, [r3, #0]
      break;
 800021a:	e000      	b.n	800021e <Enable_Sysclk_Input+0x56>
      break;
 800021c:	bf00      	nop
  }
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000000 	.word	0x20000000

08000230 <Wait_Sysclk_Ready>:

/*
 * clk_source = HSI, HSE, PLL
 */
void Wait_Sysclk_Ready(uint8_t clk_source)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
  switch(clk_source)
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	2b02      	cmp	r3, #2
 800023e:	d018      	beq.n	8000272 <Wait_Sysclk_Ready+0x42>
 8000240:	2b02      	cmp	r3, #2
 8000242:	dc1f      	bgt.n	8000284 <Wait_Sysclk_Ready+0x54>
 8000244:	2b00      	cmp	r3, #0
 8000246:	d002      	beq.n	800024e <Wait_Sysclk_Ready+0x1e>
 8000248:	2b01      	cmp	r3, #1
 800024a:	d009      	beq.n	8000260 <Wait_Sysclk_Ready+0x30>
    case PLL:
      while((pRCC->CR & 1 << PLLRDY) == 1);
      break;

    default:
      break;
 800024c:	e01a      	b.n	8000284 <Wait_Sysclk_Ready+0x54>
      while((pRCC->CR & 1 << HISRDY) == 0);
 800024e:	bf00      	nop
 8000250:	4b10      	ldr	r3, [pc, #64]	@ (8000294 <Wait_Sysclk_Ready+0x64>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f003 0302 	and.w	r3, r3, #2
 800025a:	2b00      	cmp	r3, #0
 800025c:	d0f8      	beq.n	8000250 <Wait_Sysclk_Ready+0x20>
      break;
 800025e:	e012      	b.n	8000286 <Wait_Sysclk_Ready+0x56>
      while((pRCC->CR & 1 << HSERDY) == 0);
 8000260:	bf00      	nop
 8000262:	4b0c      	ldr	r3, [pc, #48]	@ (8000294 <Wait_Sysclk_Ready+0x64>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800026c:	2b00      	cmp	r3, #0
 800026e:	d0f8      	beq.n	8000262 <Wait_Sysclk_Ready+0x32>
      break;
 8000270:	e009      	b.n	8000286 <Wait_Sysclk_Ready+0x56>
      while((pRCC->CR & 1 << PLLRDY) == 1);
 8000272:	bf00      	nop
 8000274:	4b07      	ldr	r3, [pc, #28]	@ (8000294 <Wait_Sysclk_Ready+0x64>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800027e:	2b01      	cmp	r3, #1
 8000280:	d0f8      	beq.n	8000274 <Wait_Sysclk_Ready+0x44>
      break;
 8000282:	e000      	b.n	8000286 <Wait_Sysclk_Ready+0x56>
      break;
 8000284:	bf00      	nop
  }
}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	20000000 	.word	0x20000000

08000298 <Set_Sysclk_Input>:

/*
 * clk_source = HSI, HSE, PLL
 */
void Set_Sysclk_Input(uint8_t clk_source)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
  pRCC->CFGR |= clk_source << SW;
 80002a2:	4b07      	ldr	r3, [pc, #28]	@ (80002c0 <Set_Sysclk_Input+0x28>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6899      	ldr	r1, [r3, #8]
 80002a8:	79fa      	ldrb	r2, [r7, #7]
 80002aa:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <Set_Sysclk_Input+0x28>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	430a      	orrs	r2, r1
 80002b0:	609a      	str	r2, [r3, #8]
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	20000000 	.word	0x20000000

080002c4 <main>:
#include "rcc_driver.h"



int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  Enable_Sysclk_Input(HSE);
 80002c8:	2001      	movs	r0, #1
 80002ca:	f7ff ff7d 	bl	80001c8 <Enable_Sysclk_Input>
  Wait_Sysclk_Ready(HSE);
 80002ce:	2001      	movs	r0, #1
 80002d0:	f7ff ffae 	bl	8000230 <Wait_Sysclk_Ready>
  Set_Sysclk_Input(HSE);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f7ff ffdf 	bl	8000298 <Set_Sysclk_Input>

  while(1)
 80002da:	bf00      	nop
 80002dc:	e7fd      	b.n	80002da <main+0x16>
	...

080002e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e0:	480d      	ldr	r0, [pc, #52]	@ (8000318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e8:	480c      	ldr	r0, [pc, #48]	@ (800031c <LoopForever+0x6>)
  ldr r1, =_edata
 80002ea:	490d      	ldr	r1, [pc, #52]	@ (8000320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000324 <LoopForever+0xe>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000300:	4c0a      	ldr	r4, [pc, #40]	@ (800032c <LoopForever+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030e:	f000 f811 	bl	8000334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000312:	f7ff ffd7 	bl	80002c4 <main>

08000316 <LoopForever>:

LoopForever:
  b LoopForever
 8000316:	e7fe      	b.n	8000316 <LoopForever>
  ldr   r0, =_estack
 8000318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000324:	0800039c 	.word	0x0800039c
  ldr r2, =_sbss
 8000328:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800032c:	20000020 	.word	0x20000020

08000330 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC_IRQHandler>
	...

08000334 <__libc_init_array>:
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	4d0d      	ldr	r5, [pc, #52]	@ (800036c <__libc_init_array+0x38>)
 8000338:	4c0d      	ldr	r4, [pc, #52]	@ (8000370 <__libc_init_array+0x3c>)
 800033a:	1b64      	subs	r4, r4, r5
 800033c:	10a4      	asrs	r4, r4, #2
 800033e:	2600      	movs	r6, #0
 8000340:	42a6      	cmp	r6, r4
 8000342:	d109      	bne.n	8000358 <__libc_init_array+0x24>
 8000344:	4d0b      	ldr	r5, [pc, #44]	@ (8000374 <__libc_init_array+0x40>)
 8000346:	4c0c      	ldr	r4, [pc, #48]	@ (8000378 <__libc_init_array+0x44>)
 8000348:	f000 f818 	bl	800037c <_init>
 800034c:	1b64      	subs	r4, r4, r5
 800034e:	10a4      	asrs	r4, r4, #2
 8000350:	2600      	movs	r6, #0
 8000352:	42a6      	cmp	r6, r4
 8000354:	d105      	bne.n	8000362 <__libc_init_array+0x2e>
 8000356:	bd70      	pop	{r4, r5, r6, pc}
 8000358:	f855 3b04 	ldr.w	r3, [r5], #4
 800035c:	4798      	blx	r3
 800035e:	3601      	adds	r6, #1
 8000360:	e7ee      	b.n	8000340 <__libc_init_array+0xc>
 8000362:	f855 3b04 	ldr.w	r3, [r5], #4
 8000366:	4798      	blx	r3
 8000368:	3601      	adds	r6, #1
 800036a:	e7f2      	b.n	8000352 <__libc_init_array+0x1e>
 800036c:	08000394 	.word	0x08000394
 8000370:	08000394 	.word	0x08000394
 8000374:	08000394 	.word	0x08000394
 8000378:	08000398 	.word	0x08000398

0800037c <_init>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr

08000388 <_fini>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr
